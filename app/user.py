from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.fsm.context import FSMContext
from app.state import Driver
from aiogram.types import InputFile
from aiogram.types.input_file import FSInputFile
import os
from aiogram.types import FSInputFile
from app.database.user_service import save_driver_data,delete_user_files, get_driver_by_tg_id, check_uniqueness,check_tg_id_exists
user = Router()



@user.message(CommandStart())
async def cmd_start(message: Message,state: FSMContext):
    await state.clear()
    exist = await check_tg_id_exists(message.from_user.id)
    if exist == True:
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ‚¨áÔ∏è',reply_markup=kb.user_profile)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",reply_markup=kb.register)


@user.message(F.text=='üñä–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç—É')
async def exit_button(message: Message,state: FSMContext):
    await state.clear()
    await delete_user_files(message.from_user.id)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",reply_markup=kb.register)


@user.message(F.text=='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def registration(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",reply_markup=kb.exit)
    await state.set_state(Driver.last_name)


@user.message(Driver.last_name)
async def process_last_name(message: Message, state: FSMContext):
    last_name = message.text.strip()
    if not last_name.isalpha():  # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤
        await message.answer("–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(last_name=last_name)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Driver.first_name)


@user.message(Driver.first_name)
async def process_first_name(message: Message, state: FSMContext):
    first_name = message.text.strip()
    if not first_name.isalpha():  # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤–µ–Ω–Ω—ã–º
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(first_name=first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `–ù–µ—Ç`, –µ—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç):",parse_mode='Markdown')
    await state.set_state(Driver.middle_name)


@user.message(Driver.middle_name)
async def process_middle_name(message: Message, state: FSMContext):
    middle_name = message.text.strip()
    if not middle_name.isalpha() and middle_name.lower() != "–Ω–µ—Ç":  # –û—Ç—á–µ—Å—Ç–≤–æ –∏–ª–∏ '–ù–µ—Ç'
        await message.answer("–û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(middle_name=middle_name if middle_name.lower() != "–Ω–µ—Ç" else None)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    await state.set_state(Driver.phone)


@user.message(Driver.phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.isdigit() or len(phone) < 10:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    is_unique = await check_uniqueness('phone', phone)
    if not is_unique:
        await message.answer("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.")
        return
    await state.update_data(phone=phone)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã. –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –µ—Å—Ç—å —Ç–∏—Ä–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å —Ç–∏—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥`).",parse_mode='Markdown')
    await state.set_state(Driver.city)


@user.message(Driver.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()
    if not city.isalpha():  # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(city=city)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await state.set_state(Driver.car_make)


@user.message(Driver.car_make)
async def process_car_make(message: Message, state: FSMContext):
    car_make = message.text.strip()
    if len(car_make) < 2:  # –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–π –¥–ª–∏–Ω—ã
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(car_make=car_make)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä `A123BC77`):",parse_mode='Markdown')
    await state.set_state(Driver.car_plate)


@user.message(Driver.car_plate)
async def process_car_plate(message: Message, state: FSMContext):
    car_plate = message.text.strip().upper()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≥–æ—Å. –Ω–æ–º–µ—Ä–∞ (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: –±—É–∫–≤–∞-—Ü–∏—Ñ—Ä–∞-–±—É–∫–≤–∞)
    if not car_plate.isupper():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Ç–æ–ª—å–∫–æ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, A123BC).")
        return
    is_unique = await check_uniqueness('car_plate', car_plate)
    if not is_unique:
        await message.answer("–≠—Ç–æ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.")
        return
    await state.update_data(car_plate=car_plate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–∏—Ö –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤:")
    await state.set_state(Driver.license_number)


@user.message(Driver.license_number)
async def process_license_number(message: Message, state: FSMContext):
    license_number = message.text.strip()
    if not license_number.isdigit() or len(license_number) < 10:
        await message.answer("–ù–æ–º–µ—Ä –ø—Ä–∞–≤ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    is_unique = await check_uniqueness('license_number', license_number)
    if not is_unique:
        await message.answer("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.")
        return
    await state.update_data(license_number=license_number)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–µ—Ä–µ–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –≤–∞—à–∏—Ö –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤:")
    await state.set_state(Driver.license_front)
    

@user.message(Driver.license_front)
async def process_license_front(message: Message, state: FSMContext):
    photo = message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    file = await message.bot.get_file(photo.file_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç File
    save_dir = os.path.join(os.getcwd(), "app", "image")
    os.makedirs(save_dir, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    save_path = os.path.join(save_dir, f"license_front_{message.from_user.id}.jpg")
    await message.bot.download_file(file.file_path, save_path)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(license_front=save_path)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –≤–∞—à–∏—Ö –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤:")
    await state.set_state(Driver.license_back)


@user.message(Driver.license_back)
async def process_license_back(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)

    save_dir = os.path.join(os.getcwd(), "app", "image")
    os.makedirs(save_dir, exist_ok=True)

    save_path = os.path.join(save_dir, f"license_back_{message.from_user.id}.jpg")
    await message.bot.download_file(file.file_path, save_path)

    await state.update_data(license_back=save_path)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–∏–¥ —Å–ø–µ—Ä–µ–¥–∏):")
    await state.set_state(Driver.car_photo_1)


@user.message(Driver.car_photo_1)
async def process_car_photo_1(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)

    save_dir = os.path.join(os.getcwd(), "app", "image")
    os.makedirs(save_dir, exist_ok=True)

    save_path = os.path.join(save_dir, f"car_photo_1_{message.from_user.id}.jpg")
    await message.bot.download_file(file.file_path, save_path)

    await state.update_data(car_photo_1=save_path)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–∏–¥ —Å–∑–∞–¥–∏):")
    await state.set_state(Driver.car_photo_2)


@user.message(Driver.car_photo_2)
async def process_car_photo_2(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)

    save_dir = os.path.join(os.getcwd(), "app", "image")
    os.makedirs(save_dir, exist_ok=True)

    save_path = os.path.join(save_dir, f"car_photo_2_{message.from_user.id}.jpg")
    await message.bot.download_file(file.file_path, save_path)

    await state.update_data(car_photo_2=save_path)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–∏–¥ —Å–±–æ–∫—É):")
    await state.set_state(Driver.car_photo_3)


@user.message(Driver.car_photo_3)
async def process_car_photo_3(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)

    save_dir = os.path.join(os.getcwd(), "app", "image")
    os.makedirs(save_dir, exist_ok=True)

    save_path = os.path.join(save_dir, f"car_photo_3_{message.from_user.id}.jpg")
    await message.bot.download_file(file.file_path, save_path)

    await state.update_data(car_photo_3=save_path)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º –∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏:")
    await state.set_state(Driver.selfie_with_car)


@user.message(Driver.selfie_with_car)
async def process_selfie_with_car(message: Message, state: FSMContext):
    photo = message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    file = await message.bot.get_file(photo.file_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    save_dir = os.path.join(os.getcwd(), "app", "image")
    os.makedirs(save_dir, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    save_path = os.path.join(save_dir, f"selfie_with_car_{message.from_user.id}.jpg")
    await message.bot.download_file(file.file_path, save_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selfie_with_car=save_path)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    registration_info = (
        f"üìõ–§–∞–º–∏–ª–∏—è: {user_data.get('last_name')}\n"
        f"üìõ–ò–º—è: {user_data.get('first_name')}\n"
        f"üìõ–û—Ç—á–µ—Å—Ç–≤–æ: {user_data.get('middle_name', '–ù–µ—Ç')}\n"
        f"üìû–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')}\n"
        f"üèôÔ∏è–ì–æ—Ä–æ–¥: {user_data.get('city')}\n"
        f"üöó–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {user_data.get('car_make')}\n"
        f"üî¢–ì–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {user_data.get('car_plate')}\n"
        f"üìú–ù–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤: {user_data.get('license_number')}\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n" + registration_info,reply_markup=kb.exit_save)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    photo_descriptions = {
        'license_front': "–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤",
        'license_back': "–ó–∞–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤",
        'car_photo_1': "–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–∏–¥ —Å–ø–µ—Ä–µ–¥–∏)",
        'car_photo_2': "–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–∏–¥ —Å–∑–∞–¥–∏)",
        'car_photo_3': "–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–∏–¥ —Å–±–æ–∫—É)",
        'selfie_with_car': "–°–µ–ª—Ñ–∏ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º"
    }


    for key, description in photo_descriptions.items():
        file_path = user_data.get(key)
        if file_path and os.path.exists(file_path):
            photo_input = FSInputFile(file_path)
            await message.answer_photo(photo_input, caption=description)
            #os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

    await state.set_state(Driver.save)

@user.message(Driver.save)
async def save_driver_state(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await save_driver_data(user_data,message.from_user.id)
    await message.answer("‚úÖ–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",reply_markup=kb.user_profile)
    await state.clear()


@user.message(F.text == '‚è≥–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É')
async def save_driver(message: Message, state: FSMContext):
    await state.set_state(Driver.save)

    
@user.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def user_profile(message: Message):
    driver = await get_driver_by_tg_id(message.from_user.id)
    if not driver:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return
    profile_info = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è:\n"
        f"üÜî Telegram ID: {driver.tg_id}\n"
        f"üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è: {driver.full_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {driver.city}\n"
        f"üöó –ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: {driver.car_make}\n"
        f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {driver.car_plate}\n"
        f"üìú –ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏: {driver.license_number}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {driver.registration_date.strftime('%d.%m.%Y')}\n\n"
    )
    if driver.verification:
        profile_info += "‚úÖ –°—Ç–∞—Ç—É—Å: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞.\n"
    else:
        profile_info += "‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
    await message.answer(profile_info)

    if driver.is_blocked:
        blocked_message = (
            f"üö´ –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n"
            f"‚ùó –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {driver.comments if driver.comments else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}"
        )
        await message.answer(blocked_message)