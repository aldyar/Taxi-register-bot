from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, Command, CommandStart
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.database.admin_service import search_driver_ver, update_driver, block_driver,get_all_drivers, update_driver_verification
from app.state import SearchState, RassylkaStates
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton,InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
import os

admin2 = Router()

class Admin(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in [1075213318]
    
@admin2.message(Admin(), F.text == '‚è≥–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è')
async def list_wait(message: Message, bot: Bot, state: FSMContext):
    # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π False
    drivers = await search_driver_ver("verification", False)
    
    if not drivers:
        await message.answer("–ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
        return
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞
    for driver in drivers:
        driver_info = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è:\n"
        f"üÜî Telegram ID: {driver.tg_id}\n"
        f"üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è: {driver.full_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {driver.city}\n"
        f"üöó –ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: {driver.car_make}\n"
        f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {driver.car_plate}\n"
        f"üìú –ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏: {driver.license_number}\n"
        f"üïí –°—Ç–∞—Ç—É—Å: –í –æ–∂–∏–¥–∞–Ω–∏–∏\n"
    )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
       # button = InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"select_driver_{driver.tg_id}")
        #markup = InlineKeyboardMarkup().add(button)
        
        await message.answer(driver_info,reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å', callback_data=f"select_driver_{driver.tg_id}")]
            ]))

@admin2.callback_query(Admin(), F.data.startswith("select_driver_"))
async def select_driver(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    tg_id = int(callback_query.data.split("_")[2])
    
    # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ tg_id
    driver = await search_driver_ver("tg_id", tg_id)
    if driver:
        driver = driver[0]
        await state.update_data(selected_driver_id=tg_id)
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è
        driver_details = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è:\n"
        f"üÜî Telegram ID: {driver.tg_id}\n"
        f"üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è: {driver.full_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {driver.city}\n"
        f"üöó –ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã: {driver.car_make}\n"
        f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {driver.car_plate}\n"
        f"üìú –ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏: {driver.license_number}\n"
        f"üïí –°—Ç–∞—Ç—É—Å: –í –æ–∂–∏–¥–∞–Ω–∏–∏\n"
    )
        
         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è
        await bot.send_message(callback_query.from_user.id, driver_details, reply_markup=kb.approve_button)
        
        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        base_path = "C:\\Users\\PC\\Desktop\\Taxi registor bot\\app\\image"
        
        # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photos = {
            "–õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏": driver.license_front_url,
            "–û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏": driver.license_back_url,
            "–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–∏–¥ 1)": driver.car_photo_1,
            "–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–∏–¥ 2)": driver.car_photo_2,
            "–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–∏–¥ 3)": driver.car_photo_3,
            "–§–æ—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—è —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º": driver.selfie_with_car,
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        for caption, file_name in photos.items():
            file_path = os.path.join(base_path, file_name)
            if os.path.exists(file_path):
                photo = FSInputFile(file_path)
                await bot.send_photo(callback_query.from_user.id, photo, caption=caption)
            else:
                await bot.send_message(callback_query.from_user.id, f"{caption}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è: {driver.full_name}")
    else:
        await callback_query.answer("–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@admin2.message(Admin(), F.text == "–û–¥–æ–±—Ä–∏—Ç—å")
async def approve_driver(message: Message, state: FSMContext, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ state
    data = await state.get_data()
    tg_id = data.get("selected_driver_id")
    
    if tg_id is None:
        await message.answer("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
    success = await update_driver_verification(tg_id, True)
    
    if success:
        await message.answer(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å Telegram ID {tg_id} –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω!")
        try:
            await bot.send_message(
                chat_id=tg_id,
                text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.\n\n [–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ](https://t.me/+evPOe_ZA2GUxOTVi)",
                parse_mode="Markdown",
                disable_web_page_preview=True
            )

        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å. –û—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º state
    await state.clear()