from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, Command, CommandStart
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.database.admin_service import search_driver, update_driver, block_driver,get_all_drivers,unblock_driver
from app.state import SearchState, RassylkaStates
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton,InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot

admin = Router()

class Admin(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in [1075213318]
    

@admin.message(F.text=='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@admin.message(Admin(), CommandStart())
async def start_admin(message: Message,state: FSMContext):
    await state.clear()
    await message.answer('Hello ADMIN',reply_markup=kb.admin_main)


@admin.message(Admin(), F.text == 'üîç–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def search_user(message: Message):
    text = (
        "üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "üìå *–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:*\n"
        "‚Ä¢ –ü–æ Telegram ID\n"
        "‚Ä¢ –ü–æ –∏–º–µ–Ω–∏\n"
        "‚Ä¢ –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "‚Ä¢ –ü–æ –≥–æ—Ä–æ–¥—É\n"
        "‚Ä¢ –ü–æ –≥–æ—Å. –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        "‚Ä¢ –ü–æ –Ω–æ–º–µ—Ä—É –ª–∏—Ü–µ–Ω–∑–∏–∏\n\n"
        "‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π."
    )
    await message.answer(text, reply_markup=kb.inline_search, parse_mode="Markdown")

"""
@admin.callback_query(Admin(), F.data == 'search_by_tg_id')
async def search_by_tg_id(message: Message, callback: CallbackQuery):"""

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞
@admin.callback_query(Admin(), F.data.in_([
    'search_by_tg_id', 
    'search_by_name', 
    'search_by_phone', 
    'search_by_city', 
    'search_by_car_make', 
    'search_by_car_plate', 
    'search_by_license'
]))
async def select_search_criteria(callback: CallbackQuery, state: FSMContext):
    criteria_map = {
        'search_by_tg_id': 'tg_id',
        'search_by_name': 'full_name',
        'search_by_phone': 'phone',
        'search_by_city': 'city',
        'search_by_car_make': 'car_make',
        'search_by_car_plate': 'car_plate',
        'search_by_license': 'license_number'
    }
    field = criteria_map[callback.data]
    await state.update_data(search_field=field)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞ –≤ state
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é '{field}':")
    await state.set_state(SearchState.waiting_for_field_value)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
@admin.message(Admin(), SearchState.waiting_for_field_value)
async def process_field_value(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data['search_field']
    value = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    users = await search_driver(field, value)
    if not users:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    if len(users) == 1:
        user = users[0]
        await state.update_data(selected_user=user)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ state
        await message.answer(
            f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\n"
            f"ID: {user.tg_id}\n"
            f"–ò–º—è: {user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
            f"–ì–æ—Ä–æ–¥: {user.city}\n"
            f"–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {user.car_make}\n"
            f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {user.car_plate}\n"
            f"–õ–∏—Ü–µ–Ω–∑–∏—è: {user.license_number}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='edit_user')],
                [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')]
            ])
        )
        await state.set_state(SearchState.selected_user)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é InlineKeyboardBuilder
        keyboard_builder = InlineKeyboardBuilder()

        for user in users:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –≤ –Ω–æ–≤—ã–π —Ä—è–¥
            keyboard_builder.row(
                InlineKeyboardButton(
                    text=f"{user.full_name} ({user.tg_id})",
                    callback_data=f"select_user_{user.tg_id}"
                )
            )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º InlineKeyboardMarkup
        keyboard = keyboard_builder.as_markup()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö:",
            reply_markup=keyboard
        )


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
@admin.callback_query(Admin(), F.data.startswith("select_user_"))
async def select_user(callback: CallbackQuery, state: FSMContext):
    tg_id = int(callback.data.split("_")[-1])
    user = await search_driver('tg_id', tg_id)
    if user:
        user = user[0]
        await state.update_data(selected_user=user)
        await callback.message.answer(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            f"ID: {user.tg_id}\n"
            f"–ò–º—è: {user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
            f"–ì–æ—Ä–æ–¥: {user.city}\n"
            f"–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {user.car_make}\n"
            f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {user.car_plate}\n"
            f"–õ–∏—Ü–µ–Ω–∑–∏—è: {user.license_number}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='edit_user')],
                [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')]
            ])
        )
        await state.set_state(SearchState.selected_user)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã
@admin.callback_query(Admin(), F.data == 'cancel')
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
    await state.clear()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin.callback_query(Admin(), F.data == 'edit_user')
async def edit_user(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = data.get('selected_user')
    
    if not user:
        await callback.message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    text = (
        f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name}:\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n\n"
        "‚Ä¢ –§–ò–û\n"
        "‚Ä¢ –ì–æ—Ä–æ–¥\n"
        "‚Ä¢ –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        "‚Ä¢ –ì–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        "‚Ä¢ –ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏\n"
    )
    await callback.message.answer(text, reply_markup=kb.inline_edit_criteria)
    await callback.message.answer('‚¨áÔ∏è–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ', reply_markup=kb.admin_block_user)
    await state.set_state(SearchState.waiting_for_edit_criteria)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin.callback_query(Admin(), F.data.in_([
    'edit_full_name', 
    'edit_city', 
    'edit_car_make', 
    'edit_car_plate', 
    'edit_license_number'
]))
async def select_edit_criteria(callback: CallbackQuery, state: FSMContext):
    criteria_map = {
        'edit_full_name': 'full_name',
        'edit_city': 'city',
        'edit_car_make': 'car_make',
        'edit_car_plate': 'car_plate',
        'edit_license_number': 'license_number',
    }

    field = criteria_map[callback.data]
    await state.update_data(edit_field=field)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ state
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field}':")
    await state.set_state(SearchState.waiting_for_edit_value)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—è
@admin.message(Admin(), SearchState.waiting_for_edit_value)
async def process_edit_value(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data['edit_field']
    new_value = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ state
    user = data.get('selected_user')
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setattr(user, field, new_value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_driver(user.tg_id, field, new_value)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ save() –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await message.answer(
        f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n"
        f"{field.capitalize()}: {new_value}"
    )
    await state.set_state(SearchState.selected_user)


@admin.message(Admin(),F.text=='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' )
async def process_block_button(message: Message,state: FSMContext):
    await message.answer('‚ö†Ô∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',reply_markup=kb.admin_block_user_2)
    await state.set_state(SearchState.block_user)

@admin.message(Admin(), F.text == "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
async def block_user_without_comment(message: Message, state: FSMContext,bot:Bot):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = data.get('selected_user')
    if user:
        tg_id = user.tg_id  # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    success = await block_driver( tg_id)
    if success:
        await message.answer(f"üîí –í–æ–¥–∏—Ç–µ–ª—å —Å TG ID {tg_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.",reply_markup=kb.admin_back)
        try:
            await bot.send_message(
                chat_id=tg_id,
                text="‚ùå–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            )
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å. –û—à–∏–±–∫–∞: {e}",reply_markup=kb.admin_back)
    else:
        await message.answer(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å TG ID {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",reply_markup=kb.admin_back)
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è


@admin.message(Admin(), SearchState.block_user)
async def block_user(message: Message, state: FSMContext, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = data.get('selected_user')
    if user:
        tg_id = user.tg_id  # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comment = message.text
    success = await block_driver(tg_id, comment)
    if success:
        await message.answer(f"üîí –í–æ–¥–∏—Ç–µ–ª—å —Å TG ID {tg_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {comment}",reply_markup=kb.admin_back)
        try:
            await bot.send_message(
                chat_id=tg_id,
                text=f"‚ùå–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            )
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å. –û—à–∏–±–∫–∞: {e}",reply_markup=kb.admin_back)
    else:
        await message.answer(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å TG ID {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",reply_markup=kb.admin_back)
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    

@admin.message(Admin(), F.text == "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
async def unblock_user(message: Message, state: FSMContext,bot:Bot):
    data = await state.get_data()
    user = data.get('selected_user')
    if user:
        tg_id = user.tg_id  # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id
    unblock = await unblock_driver(tg_id)
    if unblock:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {tg_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!",reply_markup=kb.admin_back)
        try:
            await bot.send_message(
                chat_id=tg_id,
                text=f"‚úÖ–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
            )
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å. –û—à–∏–±–∫–∞: {e}",reply_markup=kb.admin_back)
    await state.clear()
