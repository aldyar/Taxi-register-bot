from app.database.models import async_session
from app.database.models import Driver
from sqlalchemy import select, func
from datetime import datetime, date, timedelta
from aiogram import Bot
from aiogram.types import ChatMember
from sqlalchemy import update
import os

def connection(func):
    async def inner(*args, **kwargs):
        async with async_session() as session:
            return await func(session, *args, **kwargs)
    return inner


@connection
async def search_driver(session, field: str, value):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏ Driver
    if not hasattr(Driver, field):
        raise ValueError(f"–ü–æ–ª–µ '{field}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏ Driver.")
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
    #query = select(Driver).where(getattr(Driver, field) == value)
    query = select(Driver).where(getattr(Driver, field).like(f"%{value}%"))
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    result = await session.scalars(query)
    return result.all()


from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import sessionmaker

@connection
async def update_driver(session, user_id: int, field: str, new_value: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏ Driver
    if not hasattr(Driver, field):
        raise ValueError(f"–ü–æ–ª–µ '{field}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏ Driver.")

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    query = select(Driver).where(Driver.tg_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if user is None:
        raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
    setattr(user, field, new_value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await session.commit()

    return user  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@connection
async def block_driver(session, tg_id: int, comment: str = None):
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ tg_id
    result = await session.execute(select(Driver).filter(Driver.tg_id == tg_id))
    driver = result.scalar_one_or_none()

    if driver:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        driver.is_blocked = True

        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if comment:
            driver.comments = comment

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await session.commit()
        return True


@connection
async def get_all_drivers(session):
    result = await session.execute(select(Driver))  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    drivers = result.scalars().all()
    return drivers

@connection
async def search_driver_ver(session, field: str, value):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏ Driver
    if not hasattr(Driver, field):
        raise ValueError(f"–ü–æ–ª–µ '{field}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏ Driver.")
    
    query = select(Driver).where(getattr(Driver, field) == value)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –∞ –Ω–µ LIKE
    result = await session.execute(query)
    return result.scalars().all()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ Driver

@connection
async def update_driver_verification(session, tg_id: int, status: bool):
    query = select(Driver).where(Driver.tg_id == tg_id)
    result = await session.execute(query)
    driver = result.scalar_one_or_none()
    
    if driver:
        driver.verification = status
        await session.commit()
        return True
    return False


@connection
async def unblock_driver(session, tg_id):
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ tg_id
    result = await session.execute(select(Driver).filter(Driver.tg_id == tg_id))
    driver = result.scalar_one_or_none()

    if driver:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        driver.is_blocked = False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await session.commit()
        return True
    else:
        return False
        































"""@connection
async def search_driver(session, field: str, value: str):
    if not hasattr(Driver, field):
        raise ValueError(f"–ü–æ–ª–µ '{field}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏ Driver.")

    value = value.strip().lower()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º LOWER –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
    query = select(Driver).where(func.lower(getattr(Driver, field)).like(f"%{value}%"))

    print(f"SQL Query: {query}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    result = await session.scalars(query)
    return result.all()"""








"""    drivers = await search_driver('tg_id' ,1075213318)
    if drivers:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        response = "üë§ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for driver in drivers:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            response += (
                f"ID: {driver.tg_id}\n"
                f"–ò–º—è: {driver.full_name}\n"
                f"–ì–æ—Ä–æ–¥: {driver.city}\n\n"
            )
        await message.answer(response)
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")"""